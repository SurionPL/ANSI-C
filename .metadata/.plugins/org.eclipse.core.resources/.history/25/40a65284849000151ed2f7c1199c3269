/*
 * I2C.c
 *
 *  Created on: 26 lip 2015
 *      Author: Bartek
 */

/**
  *******************************************************************************
  * @ File    I2C.h
  * @ Author  Bartlomiej Kusmierczyk
  * @ Version V1.0
  * @ Date    26-July-2015
  * @ Brief   This file contains all the I2C interface firmware functions.
  *******************************************************************************
  */



/* Includes -------------------------------------------------------------------*/
#include "TWI.h"

#include <avr/io.h>
#include <util/delay.h>
#include <util/TWI.h>

//#include "USART.h"

//Dodac jakas error flag!
uint8_t I2C_ErrorFlag = 0;

char table[2] = {'O','K'};			//?????????
char table2[2] = {'N','O'};

//void I2C_Init(I2C_InitTypeDef* I2C_InitStruct)

void I2C_Init(uint16_t speed)
{
	TWCR = (1<<TWEA) | (1<<TWEN);


	speed=(4000000/speed/100-16)/2;
	uint8_t prescaler = 0;
	while(speed>255) {
		prescaler++;
		speed/=4;
	}
	TWSR = (TWSR & ((1<<TWPS1) | (1<<TWPS0))) | prescaler;
	TWBR = speed;
}

void I2C_Start()  //Dodac zwracanie statusu wszedzie!
{
	TWCR = (1<<I2CNT) | (1<<TWSTA) | (1<<TWEN);
	//Wait for I2CNT Flag set. This	indicates that the START condition
	//has been transmitted
	while (!(TWCR & (1<<I2CNT)));
	if ((TWSR & 0xF8) != TW_START) {
		I2C_ERROR(I2C_START_ERROR);
		//return I2C_START_ERROR;
	}
	//return 0;
}


void I2C_RStart() {
	TWCR = (1<<I2CNT) | (1<<TWSTA) | (1<<TWEN);
	//Wait for I2CNT Flag set. This	indicates that the START condition
	//has been transmitted
	while (!(TWCR & (1<<I2CNT)));
	if ((TWSR & 0xF8) != TW_REP_START) {
		I2C_ERROR(I2C_REP_START_ERROR);
		//return I2C_START_ERROR;
	}
	//return 0;
}

void I2C_Stop()
{
	//Send Stop bit
	TWCR = (1<<I2CNT) | (1<<TWEN) | (1<<TWSTO);
}

void I2C_Write_SLA(uint8_t address)
{
	uint8_t status;
	if((address & 0x01) == 0) status = TW_MT_SLA_ACK;
	else status = TW_MR_SLA_ACK;
	TWDR = address;
	TWCR = (1<<I2CNT) | (1<<TWEN);
	while (!(TWCR & (1<<I2CNT))); //Czekaj na zakonczenie
	if (TW_STATUS != status)
	{
		I2C_ERROR(I2C_ACK_ERROR); //NACK error
		//return I2C_ACK_ERROR;
		//Send_String(table2,2);
	}
	//return 0;
}


void I2C_WriteByte(uint8_t byte)
{
	TWDR = byte;
	TWCR = (1<<I2CNT) | (1<<TWEN);
	while (!(TWCR & (1<<I2CNT)));
	if(TW_STATUS != TW_MT_DATA_ACK)
		I2C_ERROR(I2C_NACK_ERROR);
}

uint8_t I2C_ReadByte_NACK()
{
	TWCR = (1<<I2CNT) | (1<<TWEN);
	while (!(TWCR & (1<<I2CNT)));
	if(TW_STATUS != TW_MR_DATA_ACK) {
		I2C_ERROR(I2C_NACK_ERROR);
	}
	return TWDR;
}

uint8_t I2C_ReadByte_ACK()
{
	TWCR = (1<<I2CNT) | (1<<TWEN) | (1<<TWEA);
	while (!(TWCR & (1<<I2CNT)));
	if (TW_STATUS != TW_MR_DATA_ACK) I2C_ERROR(I2C_NACK_ERROR);
	return TWDR;
}





void I2C_ERROR(uint8_t error)
{
	I2C_ErrorFlag = error;
	//Wypelnic czyms do interfejsu z uzytkownikiem
}


void I2C_ReadBytes(uint8_t SLA, uint8_t address ,uint8_t size, uint8_t* buffer)
{
	I2C_Start();
	I2C_Write_SLA(SLA);
	I2C_WriteByte(address);
	I2C_RStart();
	I2C_Write_SLA(SLA+1);
	//while (size--) *buffer++ = size ? I2C_ReadByte_ACK() : ( len ? ACK : NACK );
	while(size--)
	{
		*buffer++ = size ? I2C_ReadByte_ACK() : I2C_ReadByte_NACK();
	}


	/*
	for (uint8_t i=0; i<size-1; i++) {
		buffer[i] = I2C_ReadByte_ACK();
	}
	buffer[size-1]=I2C_ReadByte_NACK();
	*/
}

void I2C_WriteBytes(uint8_t SLA, uint8_t address ,uint8_t size, uint8_t* buffer)
{
	I2C_Start();
	I2C_Write_SLA(SLA);
	I2C_WriteByte(address);
	while (size--) I2C_WriteByte(*buffer++);
	I2C_Stop();
}
