/**
 *******************************************************************************
 * @ File    BMP180.c
 * @ Author  Bartlomiej Kusmierczyk
 * @ Version V1.0
 * @ Date    28-July-2015
 * @ Brief   This file contains all the BMP180 sensor firmware functions.
 *******************************************************************************
 */

/*-------------------------------------------------------------------*/
#include <avr/io.h>
#include <util/delay.h>
#include "../I2C/I2C.h"
#include "BMP180.h"
/*-------------------------------------------------------------------*/

BMP180_TypeDef BMP180_Struct;

/**
 * @ Brief  	Pobiera wartosc UT z rejestru czujnika.
 * @ Parameter  None.
 * @ Retval 	Surowa wartosc pomiaru temperatury (UT).
 */
int32_t BMP180_GetUT() {
	int32_t UT = 0;
	uint8_t buffer[2];
	I2C_ReadBytes(BMP180_SLA, BMP180_ADC_MSB_REG, 2, buffer);
	//BMP180_Struct.UT = 0;
	BMP180_Struct.UT = (((int32_t) buffer[0]) << 8) | ((int32_t) buffer[1]);
	return UT;
}


/**
 * @ Brief  	Pobiera wartosc UP z rejestru czujnika.
 * @ Parameter  None.
 * @ Retval 	Surowa wartosc pomiaru cisnienia (UT).
 */
int32_t BMP180_GetUP() {
	int32_t UP = 0;
	uint8_t OSS = ((BMP180_Struct.BMP180_Mode) & 0xC0) >> 6;
	uint8_t buffer[3];
	I2C_ReadBytes(BMP180_SLA, BMP180_ADC_MSB_REG, 3, buffer);
	UP = ((((int32_t) buffer[0]) << 16) | (((int32_t) buffer[1]) << 8) | (((int32_t) buffer[2]))) >> (8 - OSS);
	return UP;
}


/**
 * @ Opis:				Inicjalizuje BMP180 do pracy.
 * @ Parametry:			BMP180Mode_TypeDef: tryb pomiaru.
 * @ Zwracana wartosc:	None.
 */
void BMP180_Init(BMP180Mode_TypeDef BMP180_Mode) {
	BMP180_Struct.BMP180_Mode = BMP180_Mode;

	uint8_t buffer[22];

	I2C_ReadBytes(BMP180_SLA, BMP180_MEM_START, 22, buffer);

	BMP180_Struct.AC1 = ((short) buffer[0] << 8 		| ((short) buffer[1]));
	BMP180_Struct.AC2 = ((short) buffer[2] << 8 		| ((short) buffer[3]));
	BMP180_Struct.AC3 = ((short) buffer[4] << 8 		| ((short) buffer[5]));
	BMP180_Struct.AC4 = ((unsigned int) buffer[6]  << 8	| ((unsigned int) buffer[7]));
	BMP180_Struct.AC5 = ((unsigned int) buffer[8]  << 8	| ((unsigned int) buffer[9]));
	BMP180_Struct.AC6 = ((unsigned int) buffer[10] << 8	| ((unsigned int) buffer[11]));
	BMP180_Struct.B1  = ((short) buffer[12] << 8 		| ((short) buffer[13]));
	BMP180_Struct.B2  = ((short) buffer[14] << 8 		| ((short) buffer[15]));
	BMP180_Struct.MB  = ((short) buffer[16] << 8 		| ((short) buffer[17]));
	BMP180_Struct.MC  = ((short) buffer[18] << 8 		| ((short) buffer[19]));
	BMP180_Struct.MD  = ((short) buffer[20] << 8 		| ((short) buffer[21]));
}


/**
 * @ Brief  	Rozpoczyna pomiar temperatury.
 * @ Parameter  None.
 * @ Retval 	None.
 */
void BMP180_StartTemperature() {
	I2C_Start();
	I2C_Write_SLA(BMP180_SLA);
	I2C_WriteByte(BMP180_CTRL_MEAS_REG);
	I2C_WriteByte(BMP180_T_MEASURE);
	I2C_Stop();
}


/**
 * @ Brief  	 Starts the BMP180 pressure measurement.
 * 		 	 	 First needs a single temperature measurement.
 * @ Parameter   None.
 * @ Retval 	 None.
 */
void BMP180_StartPressure() {
	I2C_Start();
	I2C_Write_SLA(BMP180_SLA);
	I2C_WriteByte(BMP180_CTRL_MEAS_REG);
	I2C_WriteByte(BMP180_Struct.BMP180_Mode);
	I2C_Stop();
}


/**
 * @ Brief  	Gets the uncompensed temperature from sensor and calculate it to Celsius degrees.
 * @ Parameter  None.
 * @ Retval 	Temperature in 0.1*C.
 */
int32_t BMP180_GetTemperature() {
	BMP180_Struct.UT = BMP180_GetUT();

	/* Algorytm */
	BMP180_Struct.B5 = 0;

	int32_t X1 = ((BMP180_Struct.UT - (int32_t)(BMP180_Struct.AC6))
			* (int32_t) (BMP180_Struct.AC5)) >> 15;
	int32_t X2 = ((int32_t) (BMP180_Struct.MC) << 11)
			/ (X1 + (int32_t) (BMP180_Struct.MD));
	BMP180_Struct.B5 = X1 + X2;

	int32_t temperature = (BMP180_Struct.B5 + 8L) >> 4;

	return temperature;

}


/**
 * @ Brief  	Gets the uncompensed pressure from sensor and calculate it to Pa (Pascal) units.
 * @ Parameter  None.
 * @ Retval 	Pressure in Pa.
 */
int32_t BMP180_GetPressure() {
	uint8_t OSS = ((BMP180_Struct.BMP180_Mode) & 0xC0) >> 6;
	BMP180_Struct.UP = BMP180_GetUP();
	int32_t pressure;

	/* Pressure algorithm */
	int32_t B6 = BMP180_Struct.B5 - 4000L;
	int32_t X1 = (BMP180_Struct.B2 * ((B6 * B6) >> 12)) >> 11;
	int32_t X2 = (BMP180_Struct.AC2 * B6) >> 11;
	int32_t X3 = X1 + X2;
	int32_t B3 = ((((((int32_t) BMP180_Struct.AC1) << 2) + X3) << OSS) + 2L) >> 2;
	X1 = (BMP180_Struct.AC3 * B6) >> 13;
	X2 = (BMP180_Struct.B1 * ((B6 * B6) >> 12)) >> 16;
	X3 = ((X1 + X2) + 2L) >> 2;
	uint32_t B4 = (((int32_t) BMP180_Struct.AC4) * ((uint32_t) (X3 + 32768UL))) >> 15;
	uint32_t B7 = (((uint32_t) BMP180_Struct.UP) - B3) * (50000UL >> OSS);

	if (B7 < 0x80000000) {
		pressure = (B7 << 1) / B4;
	} else {
		pressure = (B7 / B4) << 1;
	}

	X1 = (((pressure >> 8) * (pressure >> 8)) * 3038) >> 16;


	X2 = (-7357L * pressure) >> 16;
	pressure = pressure + ((X1 + X2 + 3791L) >> 4);

	return pressure;
}

