/*
 * TWI.c
 *
 *  Created on: 26 lip 2015
 *      Author: Bartek
 */

/**
  *******************************************************************************
  * @ Plik    I2C.h
  * @ Autor   Bartlomiej Kusmierczyk
  * @ Wersja  V1.0
  * @ Data    26 lipca 2015
  * @ Opis    Ten plik zawiera funkcje do obslugi inerfejsu TWI.
  *******************************************************************************
  */

/*-------------------------------------------------------------------*/
#include <avr/io.h>
#include <util/delay.h>
#include <util/TWI.h>
#include "I2C.h"
/*-------------------------------------------------------------------*/

uint8_t TWI_ErrorFlag;		/* Flaga bledu */


/**
  * @ Opis:				Inicjalizuje interfejs TWI.
  * @ Parametry:		speed: predkosc transmisji.
  * @ Zwracana wartosc: Brak.
  */
void TWI_Init(uint16_t speed)
{
	TWCR = (1<<TWEA) | (1<<TWEN);

	speed=(4000000/speed/100-16)/2;
	uint8_t prescaler = 0;
	while(speed>255) {
		prescaler++;
		speed/=4;
	}
	TWSR = (TWSR & ((1<<TWPS1) | (1<<TWPS0))) | prescaler;
	TWBR = speed;
}


/**
  * @ Opis:				Wysyla bit startu.
  * @ Parametry:		Brak.
  * @ Zwracana wartosc: Brak.
  */
void TWI_Start()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	//Wait for TWINT Flag set. This	indicates that the START condition
	//has been transmitted
	while (!(TWCR & (1<<TWINT)));
	if ((TWSR & 0xF8) != TW_START) {
		TWI_ERROR(I2C_START_ERROR);
	}

}


/**
  * @ Opis:				Wysyla bit powtorzonego startu.
  * @ Parametry:		Brak.
  * @ Zwracana wartosc: Brak.
  */
void TWI_RStart() {
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	//Wait for TWINT Flag set. This	indicates that the START condition
	//has been transmitted
	while (!(TWCR & (1<<TWINT)));
	if ((TWSR & 0xF8) != TW_REP_START) {
		TWI_ERROR(I2C_REP_START_ERROR);
	}
}

/**
  * @ Opis:				Wysyla bit stopu.
  * @ Parametry:		Brak.
  * @ Zwracana wartosc: Brak.
  */
void TWI_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
}


/**
  * @ Opis:				Wysyla adres ukladu slave.
  * @ Parametry:		address: adres ukladu.
  * @ Zwracana wartosc: Brak.
  */
void TWI_Write_SLA(uint8_t address)
{
	uint8_t status;
	if((address & 0x01) == 0) status = TW_MT_SLA_ACK;
	else status = TW_MR_SLA_ACK;
	TWDR = address;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT))); //Czekaj na zakonczenie
	if (TW_STATUS != status)
	{
		TWI_ERROR(I2C_ACK_ERROR); //NACK error
	}
}


/**
  * @ Opis:				Wysyla bit powtorzonego startu.
  * @ Parametry:		Brak.
  * @ Zwracana wartosc: Brak.
  */
void TWI_WriteByte(uint8_t byte)
{
	TWDR = byte;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	if(TW_STATUS != TW_MT_DATA_ACK)
		TWI_ERROR(I2C_NACK_ERROR);
}

uint8_t TWI_ReadByte_NACK()
{
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	if(TW_STATUS != TW_MR_DATA_ACK) {
		TWI_ERROR(I2C_NACK_ERROR);
	}
	return TWDR;
}

uint8_t TWI_ReadByte_ACK()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while (!(TWCR & (1<<TWINT)));
	if (TW_STATUS != TW_MR_DATA_ACK) TWI_ERROR(I2C_NACK_ERROR);
	return TWDR;
}





void TWI_ERROR(uint8_t error)
{
	TWI_ErrorFlag = error;
	if(error == I2C_START_ERROR) PORTB = 1<<PB1;  //??????????????????????????????
	//Wypelnic czyms do interfejsu z uzytkownikiem
}


/**
  * @ Opis:				Odczytuje ciag bajtow.
  * @ Parametry:		-SLA: adres slave ukladu.
  * 					-address: adres rejestru.
  * 					-size: liczba bajtow do odebrania.
  * 					-buffer: wskaznik na tablice zawierajaca dane.
  * @ Zwracana wartosc: Brak.
  */
void TWI_ReadBytes(uint8_t SLA, uint8_t address, uint8_t size, uint8_t* buffer)
{
	TWI_Start();
	TWI_Write_SLA(SLA);
	TWI_WriteByte(address);
	TWI_RStart();
	TWI_Write_SLA(SLA+1);

	while(size--)
	{
		*buffer++ = size ? TWI_ReadByte_ACK() : TWI_ReadByte_NACK();
	}
}


/**
  * @ Opis:				Wysyla ciag bajtow.
  * @ Parametry:		-SLA: adres slave ukladu.
  * 					-address: adres rejestru.
  * 					-size: liczba bajtow do wyslania.
  * 					-buffer: wskaznik na tablice zawierajaca dane.
  * @ Zwracana wartosc: Brak.
  */
void TWI_WriteBytes(uint8_t SLA, uint8_t address, uint8_t size, uint8_t* buffer)
{
	TWI_Start();
	TWI_Write_SLA(SLA);
	TWI_WriteByte(address);
	while (size--) TWI_WriteByte(*buffer++);
	TWI_Stop();
}
