/*
 * main.c
 *
 *  Created on: 12 lis 2015
 *      Author: Bartek
 */

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <stdio.h>
#include "I2C/I2C.h"
#include "main.h"
#include "AVG/AVG.h"
#include "ESP8266_CL/ESP8266_Cl.h"

#include "AuxiliaryLib/AuxiliaryLib.h"
#define SIZE 8
#define MASK (SIZE-1)


volatile uint8_t trigger_counter;
volatile uint8_t reset_counter;

volatile uint8_t trigger_flag;	/* Flaga zezwolenia na wyzwolenie pomiarow */
volatile uint8_t reset_connection_flag;

volatile int8_t  temperature[SIZE];
volatile uint16_t illuminance[SIZE];
volatile uint8_t humidity[SIZE];
volatile int32_t pressure[SIZE];

volatile int8_t  temperature_avg;
volatile int32_t pressure_avg;
volatile uint16_t illuminance_avg;
volatile uint8_t humidity_avg;



int main() {
	DDRB  = 1 << PB1;
	PORTB = 1 << PB1;
	uint8_t index;
	trigger_counter = 0;
	//initializeInterfaces();
	//initializeModules();
	//configInterrupt();
	initializeTimers();


	for (int i = 0; i < SIZE; i++)
	{
		illuminance[i] = getIlluminance();
		temperature[i] = getTemperature();
		humidity[i]    = getHumidity();
	}

	humidity_avg = calcAVG_UINT8(humidity, SIZE);
	temperature_avg = calcAVG_INT8(temperature, SIZE);
	illuminance_avg = calcAVG_UINT16(illuminance, SIZE);



    sei();  // globalne odblokowanie przerwañ

   //uart_puts("************** Dzien Dobry ******************\r\n");


	while(1) {
		PORTB ^= 1<<PB1;
		_delay_ms(2000);

		if (trigger_flag == MEASUREMENTS_TRIGGER_ENABLE)
		{

		}

		if (reset_counter % 5 == 0)
		{
			ESP_Disconnect();
			_delay_ms(2000);
			//ESP_ConnectServer(char* ip_address, char* port);
			_delay_ms(3000);
		}
//		//BMP180_StartTemp();
//		_delay_ms(60);
//		temp = BMP180_GetTemp();
//		//BMP180_StartPress();
//		//_delay_ms(60);
//		press = BMP180_GetPress();
//		SendToUart();
//		_delay_ms(5000);

	}
}



ISR(TIMER1_COMPA_vect)
{

	if (trigger_counter % 60 == 0)
	{
		trigger_counter = 0;
		reset_counter++;
		trigger_flag = MEASUREMENTS_TRIGGER_ENABLE;
	}
	if (reset_counter % 5 == 0)
	{
		reset_counter = 0;
		reset_connection_flag = RESET_CONNECTION_ENABLE;

	}
	PORTB ^= 1<<PB1;
	trigger_counter++;
}
