
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000f2  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  00000190  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ef       	ldi	r30, 0xF2	; 242
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 36       	cpi	r26, 0x6B	; 107
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	36 d0       	rcall	.+108    	; 0xc6 <main>
  5a:	49 c0       	rjmp	.+146    	; 0xee <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <USART_Init>:
  5e:	90 bd       	out	0x20, r25	; 32
  60:	89 b9       	out	0x09, r24	; 9
  62:	88 e1       	ldi	r24, 0x18	; 24
  64:	8a b9       	out	0x0a, r24	; 10
  66:	86 e8       	ldi	r24, 0x86	; 134
  68:	80 bd       	out	0x20, r24	; 32
  6a:	08 95       	ret

0000006c <USART_Transmit>:
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <USART_Transmit>
  70:	8c b9       	out	0x0c, r24	; 12
  72:	08 95       	ret

00000074 <USART_Flush>:
  74:	01 c0       	rjmp	.+2      	; 0x78 <USART_Flush+0x4>
  76:	8c b1       	in	r24, 0x0c	; 12
  78:	5f 99       	sbic	0x0b, 7	; 11
  7a:	fd cf       	rjmp	.-6      	; 0x76 <USART_Flush+0x2>
  7c:	08 95       	ret

0000007e <USART_TransmitInt>:
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <USART_TransmitInt>
  82:	50 98       	cbi	0x0a, 0	; 10
  84:	90 fd       	sbrc	r25, 0
  86:	50 9a       	sbi	0x0a, 0	; 10
  88:	8c b9       	out	0x0c, r24	; 12
  8a:	08 95       	ret

0000008c <USART_Receive>:
  8c:	5f 9b       	sbis	0x0b, 7	; 11
  8e:	fe cf       	rjmp	.-4      	; 0x8c <USART_Receive>
  90:	8c b1       	in	r24, 0x0c	; 12
  92:	08 95       	ret

00000094 <USART_TransmitString>:
  94:	fc 01       	movw	r30, r24
  96:	03 c0       	rjmp	.+6      	; 0x9e <USART_TransmitString+0xa>
  98:	5d 9b       	sbis	0x0b, 5	; 11
  9a:	fe cf       	rjmp	.-4      	; 0x98 <USART_TransmitString+0x4>
  9c:	8c b9       	out	0x0c, r24	; 12
  9e:	81 91       	ld	r24, Z+
  a0:	88 23       	and	r24, r24
  a2:	d1 f7       	brne	.-12     	; 0x98 <USART_TransmitString+0x4>
  a4:	08 95       	ret

000000a6 <USART_TransmitData>:
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	09 c0       	rjmp	.+18     	; 0xbe <USART_TransmitData+0x18>
  ac:	fc 01       	movw	r30, r24
  ae:	e2 0f       	add	r30, r18
  b0:	f3 1f       	adc	r31, r19
  b2:	e0 81       	ld	r30, Z
  b4:	5d 9b       	sbis	0x0b, 5	; 11
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <USART_TransmitData+0xe>
  b8:	ec b9       	out	0x0c, r30	; 12
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	26 17       	cp	r18, r22
  c0:	37 07       	cpc	r19, r23
  c2:	a0 f3       	brcs	.-24     	; 0xac <USART_TransmitData+0x6>
  c4:	08 95       	ret

000000c6 <main>:
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	b9 9a       	sbi	0x17, 1	; 23
  cc:	c1 9a       	sbi	0x18, 1	; 24
  ce:	89 e1       	ldi	r24, 0x19	; 25
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	c5 df       	rcall	.-118    	; 0x5e <USART_Init>
  d4:	c4 e6       	ldi	r28, 0x64	; 100
  d6:	d0 e0       	ldi	r29, 0x00	; 0
  d8:	82 e6       	ldi	r24, 0x62	; 98
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	db df       	rcall	.-74     	; 0x94 <USART_TransmitString>
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	97 e2       	ldi	r25, 0x27	; 39
  e2:	fe 01       	movw	r30, r28
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x1e>
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	d9 f7       	brne	.-10     	; 0xe2 <main+0x1c>
  ec:	f5 cf       	rjmp	.-22     	; 0xd8 <main+0x12>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
